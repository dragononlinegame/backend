// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum roles {
  User
  Admin
}

enum status {
  Pending
  Completed
  Failed
}

enum userStatus {
  Active
  Inactive
}

enum transactionType {
  Credit
  Debit
}

enum commission_type {
  LevelIncome
  DailyIncome
  SponsorIncome
}

model user {
  id       Int     @id @default(autoincrement())
  phone    String  @unique
  email    String? @unique
  username String  @unique
  password String

  referralCode String @unique

  status userStatus @default(Active)
  role   roles      @default(User)

  isBanned Boolean @default(false)

  createdAt DateTime @default(now())

  wallet wallet?
  bets   bet[]
  upline teamConfig[]
}

model teamConfig {
  userId    Int
  uplineId  Int
  level     Int
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id])

  @@unique([userId, uplineId])
  @@index([uplineId])
  @@index([userId])
}

model wallet {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  balance Decimal @default(0)

  user         user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions transaction[]
  deposits     deposit[]
  withdrawals  withdrawal[]
}

model transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  amount      Decimal
  type        transactionType @default(Debit)
  status      status          @default(Completed)
  description String?

  walletId Int
  wallet   wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model deposit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  reference String  @unique
  amount    Decimal
  method    String
  status    status  @default(Completed)

  walletId Int
  wallet   wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model withdrawal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  reference String  @unique
  amount    Decimal
  method    String
  status    status  @default(Completed)

  walletId Int
  wallet   wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model commission {
  id     Int             @id @default(autoincrement())
  amount Decimal         @default(0.00) @db.Decimal(10, 2)
  fromId Int
  toId   Int
  level  Int
  type   commission_type @default(LevelIncome)

  isPaid   Boolean  @default(false)
  createAt DateTime @default(now())

  @@index([fromId])
}

model game {
  id     Int    @id @default(autoincrement())
  serial String
  type   Int

  started_at DateTime
  ended_at   DateTime

  result String?

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  bets bet[]
  wins win[]
}

model bet {
  id         Int     @id @default(autoincrement())
  amount     Decimal
  prediction String

  createdAt DateTime @default(now())

  gameId Int
  game   game @relation(fields: [gameId], references: [id])

  userId Int
  user   user @relation(fields: [userId], references: [id])

  win win?
}

model win {
  id Int @id @default(autoincrement())

  winAmount Decimal
  isClaimed Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  betId Int @unique
  bet   bet @relation(fields: [betId], references: [id])

  gameId Int
  game   game @relation(fields: [gameId], references: [id])
}

model notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  isActive    Boolean @default(false)
  name        String
  description String
}

model event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name        String
  description String?
  image_url   String
  isActive    Boolean @default(false)
}
