// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum roles {
  Admin
  Franchise
}

enum status {
  Pending
  Completed
  Failed
  Staged
}

enum userStatus {
  Active
  Inactive
}

enum transactionType {
  Credit
  Debit
}

enum commission_type {
  LevelIncome
  DailyIncome
  SponsorIncome
}

enum profit_type {
  Daily
  Weekly
  Monthly
}

enum issue_type {
  Deposit
  Withdrawal
  Other
}

enum request_status {
  Paid
  Declined
  Pending
}

model franchise {
  id Int @id @default(autoincrement())

  phone    String  @unique
  email    String? @unique
  password String

  franchiseId   String @unique
  franchiseCode String @unique

  balance Decimal @default(0)

  role      roles    @default(Franchise)
  createdAt DateTime @default(now())

  users user[]
}

model user {
  id       Int     @id @default(autoincrement())
  phone    String  @unique
  email    String? @unique
  username String  @unique
  password String

  franchiseCode String
  referralCode  String @unique // Fcode_RCODE

  status userStatus @default(Active)

  isBanned Boolean @default(false)

  createdAt DateTime @default(now())

  franchise franchise @relation(fields: [franchiseCode], references: [franchiseCode])

  wallet wallet?
  bets   bet[]
  upline teamConfig[]
  issues issue[]

  connectionFromMe     connection[] @relation("connection_user_one")
  connectionFromOthers connection[] @relation("connection_user_two")
}

model teamConfig {
  userId   Int
  uplineId Int
  level    Int

  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id])

  @@unique([userId, uplineId])
  @@index([uplineId])
  @@index([userId])
}

model bankDetail {
  id       Int @id @default(autoincrement())
  walletId Int @unique

  beneficiaryName String
  accountNumber   String
  bankName        String
  branchIfscCode  String

  wallet wallet? @relation(fields: [walletId], references: [id])
}

model wallet {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  balance Decimal @default(0)
  locked  Decimal @default(0)

  totalBet Decimal @default(0)
  totalWin Decimal @default(0)

  user         user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions transaction[]
  deposits     deposit[]
  withdrawals  withdrawal[]
  bankDetails  bankDetail[]
}

model transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  amount      Decimal
  type        transactionType @default(Debit)
  status      status          @default(Completed)
  description String?

  walletId Int
  wallet   wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model deposit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  reference String  @unique
  amount    Decimal
  method    String
  status    status  @default(Completed)

  walletId Int
  wallet   wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model withdrawal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  reference  String  @unique
  amount     Decimal
  method     String
  status     status  @default(Pending)
  bankDetail Json

  walletId Int
  wallet   wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model commission {
  id     Int             @id @default(autoincrement())
  amount Decimal         @default(0.00) @db.Decimal(10, 2)
  fromId Int
  toId   Int
  level  Int
  type   commission_type @default(LevelIncome)

  isPaid   Boolean  @default(false)
  createAt DateTime @default(now())

  @@index([fromId])
}

model game {
  id     Int    @id @default(autoincrement())
  serial String
  type   Int

  started_at DateTime
  ended_at   DateTime

  result String?

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  bets bet[]
  wins win[]
}

model predefinedResult {
  id     Int    @id @default(autoincrement())
  type   Int
  serial String
  result String

  createdAt DateTime @default(now())
}

model bet {
  id         Int     @id @default(autoincrement())
  amount     Decimal
  prediction String

  createdAt DateTime @default(now())

  gameId Int
  game   game @relation(fields: [gameId], references: [id])

  userId Int
  user   user @relation(fields: [userId], references: [id])

  win win?
}

model win {
  id Int @id @default(autoincrement())

  winAmount Decimal
  isClaimed Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  betId Int @unique
  bet   bet @relation(fields: [betId], references: [id])

  gameId Int
  game   game @relation(fields: [gameId], references: [id])
}

model notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  isActive    Boolean @default(false)
  name        String
  description String
}

model event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name        String
  description String?
  image_url   String
  featured    Boolean @default(false)
  isActive    Boolean @default(false)
}

model profit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  betAmount    Decimal
  winAmount    Decimal
  profitAmount Decimal
  type         profit_type @default(Daily)
}

model settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model issue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type issue_type @default(Deposit)

  amount String?
  ref    String?

  note     String?
  response String?

  status status @default(Pending)

  userid    Int
  user      user       @relation(fields: [userid], references: [id], onDelete: Cascade)
  responses response[]
}

model response {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  message    String
  responseBy String // Issuer | Resolver

  issueId Int
  issue   issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model connection {
  id        Int       @id @default(autoincrement())
  userOneId Int
  userTwoId Int
  requests  request[]

  userOne user @relation("connection_user_one", fields: [userOneId], references: [id])
  userTwo user @relation("connection_user_two", fields: [userTwoId], references: [id])

  createdAt DateTime @default(now())
}

model request {
  id BigInt @id @default(autoincrement())

  connectionId Int
  senderId     Int
  receiverId   Int

  amount Decimal @default(0)
  note   String?

  connection connection @relation(fields: [connectionId], references: [id])

  status request_status @default(Pending)

  createdAt DateTime @default(now())
}
